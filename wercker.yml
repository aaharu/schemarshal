# This references the default golang container from
# the Docker Hub: https://registry.hub.docker.com/u/library/golang/
# If you want Google's container you would reference google/golang
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: tcnksm/gox
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    # Gets the dependencies
    - script:
        name: glide install
        code: |
          curl -L -o glide.tar.gz https://github.com/Masterminds/glide/releases/download/v0.12.3/glide-v0.12.3-linux-amd64.tar.gz
          tar -zxf glide.tar.gz
          mv linux-amd64/glide "$WERCKER_SOURCE_DIR/glide"
          rm -rf linux-amd64 glide.tar.gz
          "$WERCKER_SOURCE_DIR/glide" --version
          "$WERCKER_SOURCE_DIR/glide" install

    # Build the project
    - script:
        name: go build
        code: |
          go build $("$WERCKER_SOURCE_DIR/glide" novendor)

    - script:
        name: goveralls install
        code: |
          go get github.com/mattn/goveralls

    # Test the project
    - script:
        name: go test and goveralls
        code: |
          echo "mode: count" > c.out
          for pkg in $("$WERCKER_SOURCE_DIR/glide" novendor); do
            go test -covermode=count -coverprofile="pkg.out" "$pkg"
            if [ -f "pkg.out" ]; then
              tail -n +2 "pkg.out" >> c.out
              rm pkg.out
            fi
          done
          GIT_BRANCH="$WERCKER_GIT_BRANCH" "$GOPATH/bin/goveralls" -coverprofile=c.out -service=wercker.com -repotoken "$WERCKER_GOVERALLS_TOKEN"

    # corros compile
    - tcnksm/gox
